package com.app.Weather.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.app.Weather.beans.ValidationResponse;
import com.app.Weather.beans.WeatherInsight;
import com.app.Weather.constants.Constants;
import com.app.Weather.service.WeatherService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.parameters.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

/**
 * WeatherController handles HTTP requests for weather insights.
 */
@RestController
@RequestMapping(Constants.weather.WEATHER_PATH)
public class WeatherController {

    @Autowired
    private WeatherService weatherService;

    
    /**
     * Handles the HTTP GET request to retrieve weather insights based on provided parameters.
     * 
     * @param lon       The longitude coordinate.
     * @param lat       The latitude coordinate.
     * @param condition The weather condition for which insights are requested.
     * @return ResponseEntity containing weather insights as a list of WeatherInsight objects.
     *         - HTTP 200 status with the list of weather insights if the operation is successful.
     *         - HTTP 400 status with an error message if the parameters are invalid or the condition is unknown.
     *         - HTTP 500 status with a generic error message if an unexpected error occurs.
     */
    
    @GetMapping(Constants.weather.INSIGHT)
    @Operation(summary = "Get Weather Insights", description = "Retrieve weather insights based on provided parameters.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Weather insights retrieved successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid parameters or unknown condition"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    publi
    public ResponseEntity<?> getWeatherInsight(
            @RequestParam Double lon,
            @RequestParam Double lat,
            @RequestParam String condition) {
        try {
            List<WeatherInsight> insights = weatherService.getWeatherInsight(lon, lat, condition);
            return ResponseEntity.ok(insights);
        } catch (ResponseStatusException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An unexpected error occurred.");
        }
    }

    
    
}
