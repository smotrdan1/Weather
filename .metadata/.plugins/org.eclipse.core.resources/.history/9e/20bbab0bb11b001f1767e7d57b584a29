package com.app.Weather;



import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.app.Weather.beans.Weather;
import com.app.Weather.constants.Constants;
import com.app.Weather.repository.WeatherRepository;

@ExtendWith(MockitoExtension.class)
class CSVServiceTest {

    @Mock
    private WeatherRepository weatherRepository;

    private CSVService csvService;

    @BeforeEach
    void setUp() {
        csvService = new CSVService();
        csvService.weatherRepository = weatherRepository;
        csvService.csvFilePath1 = "dummy/path1.csv";
        csvService.csvFilePath2 = "dummy/path2.csv";
        csvService.csvFilePath3 = "dummy/path3.csv";
        csvService.THREAD_POOL_SIZE = "1"; // Set to 1 for simplicity
        csvService.BATCH_SIZE = "10"; // Set batch size for testing
        csvService.init();
    }

    @Test
    void testLoadCSVData() {
        try {
            // Mock BufferedReader
            BufferedReader mockBufferedReader = mock(BufferedReader.class);
            when(mockBufferedReader.readLine())
                    .thenReturn("longitude,latitude,forecastTime,temperature,precipitation")
                    .thenReturn("1.0,2.0,2024-05-27T10:00:00,25.5,10.0")
                    .thenReturn(null);

            // Call the method under test
            csvService.processCSVFile("dummy/path1.csv", mockBufferedReader);

            // Verify saveBatch method was called
            verify(weatherRepository, times(1)).saveAll(anyList());

            // Verify the correct Weather object was created and passed to saveBatch
            ArgumentCaptor<List<Weather>> captor = ArgumentCaptor.forClass(List.class);
            verify(weatherRepository).saveAll(captor.capture());

            List<Weather> savedWeather = captor.getValue();
            assertNotNull(savedWeather);
            assertEquals(1, savedWeather.size());

            Weather expectedWeather = new Weather(1.0, 2.0,
                    LocalDateTime.parse("2024-05-27T10:00:00", DateTimeFormatter.ISO_DATE_TIME),
                    25.5, 10.0);
            assertEquals(expectedWeather, savedWeather.get(0));

        } catch (IOException e) {
            fail("IOException occurred during testing: " + e.getMessage());
        }
    }
}
