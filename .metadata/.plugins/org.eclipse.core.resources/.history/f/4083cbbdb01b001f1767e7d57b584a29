package com.app.Weather;



package com.app.Weather.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

import com.app.Weather.beans.Weather;
import com.app.Weather.constants.Constants;
import com.app.Weather.repository.WeatherRepository;

@ExtendWith(MockitoExtension.class)
class CSVServiceTest {

    @Mock
    private WeatherRepository weatherRepository;

    @Value(Constants.csv.CSV_FILE_PATH_ONE)
    private String csvFilePath1;

    @Value(Constants.csv.CSV_FILE_PATH_TWO)
    private String csvFilePath2;

    @Value(Constants.csv.CSV_FILE_PATH_THREE)
    private String csvFilePath3;

    @Value(Constants.csv.CSV_THREAD_NUM)
    private String THREAD_POOL_SIZE;

    @Value(Constants.csv.CSV_BATCH_SIZE)
    private String BATCH_SIZE;

    private CSVService csvService;

    @BeforeEach
    void setUp() {
        csvService = new CSVService();
        csvService.weatherRepository = weatherRepository;
        csvService.csvFilePath1 = csvFilePath1;
        csvService.csvFilePath2 = csvFilePath2;
        csvService.csvFilePath3 = csvFilePath3;
        csvService.THREAD_POOL_SIZE = THREAD_POOL_SIZE;
        csvService.BATCH_SIZE = BATCH_SIZE;
        csvService.init();
    }

    @Test
    void testLoadCSVData() {
        try {
            // Create mocks for BufferedReader
            BufferedReader mockBufferedReader1 = createMockBufferedReader(
                "1.0,2.0,2024-05-27T10:00:00,25.5,10.0"
            );
            BufferedReader mockBufferedReader2 = createMockBufferedReader(
                "3.0,4.0,2024-05-27T11:00:00,30.0,5.0"
            );
            BufferedReader mockBufferedReader3 = createMockBufferedReader(
                "5.0,6.0,2024-05-27T12:00:00,20.0,15.0"
            );

            // Mock FileReader to return mocked BufferedReader
            whenNew(FileReader.class).withArguments(csvFilePath1).thenReturn(mockBufferedReader1);
            whenNew(FileReader.class).withArguments(csvFilePath2).thenReturn(mockBufferedReader2);
            whenNew(FileReader.class).withArguments(csvFilePath3).thenReturn(mockBufferedReader3);

            // Call the method under test
            csvService.loadCSVData();

            // Verify the saveBatch method was called with correct parameters
            verify(weatherRepository, times(3)).saveAll(anyList());

            // Verify the correct Weather objects were created and passed to saveBatch
            List<Weather> expectedWeatherBatch1 = Arrays.asList(new Weather(1.0, 2.0, LocalDateTime.parse("2024-05-27T10:00:00", DateTimeFormatter.ISO_DATE_TIME), 25.5, 10.0));
            List<Weather> expectedWeatherBatch2 = Arrays.asList(new Weather(3.0, 4.0, LocalDateTime.parse("2024-05-27T11:00:00", DateTimeFormatter.ISO_DATE_TIME), 30.0, 5.0));
            List<Weather> expectedWeatherBatch3 = Arrays.asList(new Weather(5.0, 6.0, LocalDateTime.parse("2024-05-27T12:00:00", DateTimeFormatter.ISO_DATE_TIME), 20.0, 15.0));

            verify(weatherRepository).saveAll(expectedWeatherBatch1);
            verify(weatherRepository).saveAll(expectedWeatherBatch2);
            verify(weatherRepository).saveAll(expectedWeatherBatch3);

        } catch (IOException e) {
            fail("IOException occurred during testing: " + e.getMessage());
        } catch (Exception e) {
            fail("Exception occurred during testing: " + e.getMessage());
        }
    }

    // Helper method to create a mocked BufferedReader
    private BufferedReader createMockBufferedReader(String line) {
        BufferedReader mockBufferedReader = mock(BufferedReader.class);
        when(mockBufferedReader.readLine()).thenReturn("longitude,latitude,forecastTime,temperature,precipitation", line, null);
        return mockBufferedReader;
    }
}


}
