package com.app.Weather.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.app.Weather.beans.Weather;
import com.app.Weather.beans.WeatherInsight;
import com.app.Weather.constants.Constants;
import com.app.Weather.repository.WeatherRepository;
@Service
public class WeatherService {

    @Autowired
    private WeatherRepository weatherRepository; 

    public List<WeatherInsight> getWeatherInsight(Double lon, Double lat, String condition) {
    	
    
    	
        // Logic to query the database and process weather data
        List<Weather> weatherData = weatherRepository.findByLongitudeAndLatitude(lon, lat);
        return processWeatherData(weatherData, condition);
        
    }

    private List<WeatherInsight> processWeatherData(List<Weather> weatherData, String condition) {
        List<WeatherInsight> insights = new ArrayList<>();
        for (Weather data : weatherData) {
            boolean metCondition = false;
            if (condition.equals(Constants.weather.VERY_HOT)) {
                metCondition = data.getTemperature() > 30;
            } else if (condition.equals(Constants.weather.COLD_AND_RAINY)) {
                metCondition = data.getTemperature() < 10 && data.getPrecipitation() > 0.5;
            }
            insights.add(new WeatherInsight(data.getForecastTime(), metCondition));
        }
        return insights;
    }
    

    public ResponseStatusException ValidateParams(Double lon, Double lat, String condition) {
	// Validate parameters
    	if (lon < Integer.parseInt(Constants.weather.MIN_LONGITUDE) || lon > Integer.parseInt(Constants.weather.MAX_LONGITUDE)) {
            return new ResponseStatusException(HttpStatus.BAD_REQUEST, Constants.weather.INVALID_LONGITUDE + Constants.weather.MIN_LONGITUDE + " to " + Constants.weather.MAX_LONGITUDE);
        }
    	if (lat < Integer.parseInt(Constants.weather.MIN_LATITUDE) || lat > Integer.parseInt(Constants.weather.MAX_LATITUDE)) {
    		return new ResponseStatusException(HttpStatus.BAD_REQUEST, Constants.weather.INVALID_LATITUDE + Constants.weather.MIN_LATITUDE + " to " + Constants.weather.MAX_LATITUDE);
         }
    	if (!condition.equals(Constants.weather.VERY_HOT) && !condition.equals(Constants.weather.COLD_AND_RAINY)) {
    		return new ResponseStatusException(HttpStatus.BAD_REQUEST, Constants.weather.INVALID_CONDITION);
         }
		return null
    
    }
    
   
}
